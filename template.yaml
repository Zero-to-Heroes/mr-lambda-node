AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Map-reduce implentation using Lambda, S3 and SQS in Node

Globals:
    Function:
        Environment:
            Variables:
                S3_BUCKET: !Ref S3MRBucket
                SQS_MAPPER_URL: !Ref SQSMapperInputQueue
                SQS_REDUCER_URL: !Ref SQSReducerInputQueue
                SQS_AGGREGATOR_TRIGGER_URL: !Ref SQSAggregatorTriggerQueue
                SQS_MAPPER_WATCHER_URL: !Ref SQSMapperWatcherQueue
                SQS_REDUCER_WATCHER_URL: !Ref SQSReducerWatcherQueue
                SQS_AGGREGATOR_WATCHER_URL: !Ref SQSAggregatorWatcherQueue

Resources:
    # SQS queue where messages to process each review will be published
    SQSMapperInputQueue:
        Type: AWS::SQS::Queue
        Properties:
            QueueName: mr-sqs-mapper
            VisibilityTimeout: 601
    # S3 bucket where to store all results (inteermediate + final)
    S3MRBucket:
        Type: AWS::S3::Bucket
        Properties:
            BucketName: com.zerotoheroes.mr
    # SQS queue where messages to trigger the reducers will be published
    SQSReducerInputQueue:
        Type: AWS::SQS::Queue
        Properties:
            QueueName: mr-sqs-reducer
            VisibilityTimeout: 601
    # SQS queue where a message to notify the aggregator is posted
    SQSAggregatorTriggerQueue:
        Type: AWS::SQS::Queue
        Properties:
            QueueName: mr-sqs-aggregator-trigger
            VisibilityTimeout: 601
    # SQS queue where messages to trigger the mapper watcher will be published
    SQSMapperWatcherQueue:
        Type: AWS::SQS::Queue
        Properties:
            QueueName: mr-sqs-mapper-watcher
            VisibilityTimeout: 601
    # SQS queue where messages to trigger the mapper reducer will be published
    SQSReducerWatcherQueue:
        Type: AWS::SQS::Queue
        Properties:
            QueueName: mr-sqs-reducer-watcher
            VisibilityTimeout: 601
    SQSAggregatorWatcherQueue:
        Type: AWS::SQS::Queue
        Properties:
            QueueName: mr-sqs-aggregator-watcher
            VisibilityTimeout: 601

    # Lambda function to initialize the MR (the Driver). No event there, we trigger it manually via the console for now
    # The driver will be responsible of loading all the review IDs
    DriverFunction:
        Type: AWS::Serverless::Function
        Properties:
            Handler: driver/driver.default
            Runtime: nodejs10.x
            Timeout: 880
            CodeUri: dist/driver/driver
            MemorySize: 384
            Policies:
                - AWSLambdaVPCAccessExecutionRole
                - SecretsManagerReadWrite
                - AmazonSESFullAccess
                - AmazonSNSReadOnlyAccess
                - AmazonSQSFullAccess
                - AmazonS3FullAccess
                # - arn:aws:iam::478062583808:policy/CloudWatchPolicyForLambda # See https://stackoverflow.com/questions/51166504/disable-cloudwatch-to-monitor-logs-for-lambda-function
            Tags:
                LambdaName: mr-lambda-driver
            Events:
                # Nightly build of the stats
                # Query are super complicated in order to benefit from the SQL optimization when running JOIN queries, which
                # are not present when using the IN clause
                # See the tests_for_in_clause.sql dev script
                BgsWarbandStatsTrigger:
                    Type: Schedule
                    Properties:
                        Input: '{ "jobName": "bgs-avg-stats-per-turn-per-hero", "query": null, "implementation": "bgs-avg-stats-per-turn-per-hero" }'
                        Schedule: cron(0 1 */3 * ? *)
                # Build tribes
                BgsTribesStatTrigger:
                    Type: Schedule
                    Properties:
                        Input: '{ "jobName": "bgs-heroes-tribe", "query": null, "implementation": "bgs-heroes-tribe" }'
                        Schedule: cron(0 1 2-31/3 * ? *)
    MapperWatcherFunction:
        Type: AWS::Serverless::Function
        Properties:
            Handler: mapper-watcher/mapper-watcher.default
            Runtime: nodejs10.x
            CodeUri: dist/mapper-watcher/mapper-watcher
            MemorySize: 256
            Policies:
                - AWSLambdaVPCAccessExecutionRole
                - SecretsManagerReadWrite
                - AmazonSESFullAccess
                - AmazonSNSReadOnlyAccess
                - AmazonSQSFullAccess
                - AmazonS3FullAccess
                # - arn:aws:iam::478062583808:policy/CloudWatchPolicyForLambda # See https://stackoverflow.com/questions/51166504/disable-cloudwatch-to-monitor-logs-for-lambda-function
            Tags:
                LambdaName: mr-lambda-mapper-watcher
            Timeout: 600
            Events:
                SQSAggregatorWatcherEvent:
                    Type: SQS
                    Properties:
                        Queue: !GetAtt SQSMapperWatcherQueue.Arn
                        BatchSize: 1
    ReducerWatcherFunction:
        Type: AWS::Serverless::Function
        Properties:
            Handler: reducer-watcher/reducer-watcher.default
            Runtime: nodejs10.x
            CodeUri: dist/reducer-watcher/reducer-watcher
            MemorySize: 128
            Policies:
                - AWSLambdaVPCAccessExecutionRole
                - SecretsManagerReadWrite
                - AmazonSESFullAccess
                - AmazonSNSReadOnlyAccess
                - AmazonSQSFullAccess
                - AmazonS3FullAccess
                # - arn:aws:iam::478062583808:policy/CloudWatchPolicyForLambda # See https://stackoverflow.com/questions/51166504/disable-cloudwatch-to-monitor-logs-for-lambda-function
            Tags:
                LambdaName: mr-lambda-reducer-watcher
            Timeout: 600
            Events:
                SQSAggregatorWatcherEvent:
                    Type: SQS
                    Properties:
                        Queue: !GetAtt SQSReducerWatcherQueue.Arn
                        BatchSize: 1
    AggregatorWatcherFunction:
        Type: AWS::Serverless::Function
        Properties:
            Handler: aggregator-watcher/aggregator-watcher.default
            Runtime: nodejs10.x
            CodeUri: dist/aggregator-watcher/aggregator-watcher
            MemorySize: 258
            Policies:
                - AWSLambdaVPCAccessExecutionRole
                - SecretsManagerReadWrite
                - AmazonSESFullAccess
                - AmazonSNSReadOnlyAccess
                - AmazonSQSFullAccess
                - AmazonS3FullAccess
                # - arn:aws:iam::478062583808:policy/CloudWatchPolicyForLambda # See https://stackoverflow.com/questions/51166504/disable-cloudwatch-to-monitor-logs-for-lambda-function
            Tags:
                LambdaName: mr-lambda-aggregator-watcher
            Timeout: 600
            Events:
                SQSAggregatorWatcherEvent:
                    Type: SQS
                    Properties:
                        Queue: !GetAtt SQSAggregatorWatcherQueue.Arn
                        BatchSize: 1
    # Lambda function that acts as a mapper
    MapperFunction:
        Type: AWS::Serverless::Function
        Properties:
            Handler: mapper/mapper.default
            Runtime: nodejs10.x
            CodeUri: dist/mapper/mapper
            MemorySize: 384
            ReservedConcurrentExecutions: 50
            Policies:
                - AWSLambdaVPCAccessExecutionRole
                - SecretsManagerReadWrite
                - AmazonSESFullAccess
                - AmazonSNSReadOnlyAccess
                - AmazonSQSFullAccess
                - AmazonS3FullAccess
                # - arn:aws:iam::478062583808:policy/CloudWatchPolicyForLambda # See https://stackoverflow.com/questions/51166504/disable-cloudwatch-to-monitor-logs-for-lambda-function
            Tags:
                LambdaName: mr-lambda-mapper
            Timeout: 600
            Events:
                SQSMapperRequestedEvent:
                    Type: SQS
                    Properties:
                        Queue: !GetAtt SQSMapperInputQueue.Arn
                        BatchSize: 1
    # Lambda function that acts as a reducer
    ReducerFunction:
        Type: AWS::Serverless::Function
        Properties:
            Handler: reducer/reducer.default
            Runtime: nodejs10.x
            CodeUri: dist/reducer/reducer
            MemorySize: 384
            ReservedConcurrentExecutions: 50
            Policies:
                - AWSLambdaVPCAccessExecutionRole
                - SecretsManagerReadWrite
                - AmazonSESFullAccess
                - AmazonSNSReadOnlyAccess
                - AmazonSQSFullAccess
                - AmazonS3FullAccess
                # - arn:aws:iam::478062583808:policy/CloudWatchPolicyForLambda # See https://stackoverflow.com/questions/51166504/disable-cloudwatch-to-monitor-logs-for-lambda-function
            Tags:
                LambdaName: mr-lambda-reducer
            Timeout: 600
            Events:
                SQSReducerRequestedEvent:
                    Type: SQS
                    Properties:
                        Queue: !GetAtt SQSReducerInputQueue.Arn
                        BatchSize: 1
    # Lambda function that serves as an aggregator, and stores the final result in S3
    AggregatorFunction:
        Type: AWS::Serverless::Function
        Properties:
            Handler: reducer/reducer.default
            Runtime: nodejs10.x
            CodeUri: dist/reducer/reducer
            MemorySize: 256
            Policies:
                - AWSLambdaVPCAccessExecutionRole
                - SecretsManagerReadWrite
                - AmazonSESFullAccess
                - AmazonSNSReadOnlyAccess
                - AmazonSQSFullAccess
                - AmazonS3FullAccess
                # - arn:aws:iam::478062583808:policy/CloudWatchPolicyForLambda # See https://stackoverflow.com/questions/51166504/disable-cloudwatch-to-monitor-logs-for-lambda-function
            Tags:
                LambdaName: mr-lambda-aggregator
            Timeout: 600
            Events:
                SQSAggregatorRequestedEvent:
                    Type: SQS
                    Properties:
                        Queue: !GetAtt SQSAggregatorTriggerQueue.Arn
                        # There should always only be one message
                        BatchSize: 1
                # Nightly build of the stats
                LastPeriodTrigger:
                    Type: Schedule
                    Properties:
                        Input: '{ "test": "test" }'
                        Schedule: cron(0 1 * * ? *) # Triggers every day at 1 AM
